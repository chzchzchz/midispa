package main

type Grammar Peg {
        script *Script

	curPhrase *Phrase

        id string
	str string
	num int

	lastPatternId string

	curPlayLine PlayLine
	playStack []PlayLine
}

Grammar <- (_wsnl? (stmt / _comment) _ws? _comment? _wsnl?)* !.

stmt <- phrase / pattern / bpm / position / play / filter
phrase <- 'phrase' _wsnl id { p.startPhrase() } _wsnl?
         '{' (_wsnl? (play / _comment) _wsnl? _comment?)+ '}'
	 { p.endPhrase() }
	 apply_filters

bpm <- 'bpm' _ws num { p.setBPM() }
pattern <- 'pat' _ws id _ws str { p.addPattern(); } apply_filters
filter <- 'filter' _ws id _ws str { p.addFilter() } filter_args?
filter_args <- _ws '{' _ws (str { p.addFilterArg() } _ws)* '}'

apply_filter <- {p.str = ""} id filter_args? { p.applyFilter() }
apply_filters <- (_ws '|' _ws apply_filter)*


position <- id ':' { p.addPosition() }
play <- <play_expr> { p.str = text; p.addPlay() }
play_expr  <-  play_line { p.pushPlay() } _ws? ';' _ws? play_line { p.playOpConcat() } /
	    play_line { p.pushPlay() } _ws? '|' _ws? play_line { p.playOpParallel() } /
	    play_line
play_line <- (id { p.addToIdList(p.id) }  / '(' _ws? play_expr _ws? ')')
	     (_ws? '*' _ws? num { p.playOpRepeat(p.num) })?

num <- <('-'? [0-9]+)> { fmt.Sscanf(text, "%d", &p.num)  }
id <- <[a-zA-Z_][a-zA-Z0-9_]*> { p.id = text }
str <- ('"' <(!'"' .)+> '"') / <(!(_wsnl / '"') .)+>  { p.str = text }

_ws <- [ \t]+
_wsnl <- [ \t\n\r]+
_comment <- ('#' (![\n\r] .)*)

